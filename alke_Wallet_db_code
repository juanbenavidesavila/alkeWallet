nombreProyecto = ALKE_WALLET
nombre = Juan Benavides Avila
Curso = Desarrollador de Aplicaciones Móviles

_________________________________________________________________________

 /* Crear la base de datos */

CREATE DATABASE IF NOT EXISTS ALKEWALLET;

USE ALKEWALLET;

/* Crear la tabla Usuario */

CREATE TABLE Usuario (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(100) NOT NULL, 
    correoElectronico VARCHAR(100) NOT NULL UNIQUE,
    contrasena VARCHAR(15) NOT NULL,
    saldo DECIMAL(10,2) NOT NULL,
    CHECK (LENGTH(contrasena) >= 6 AND LENGTH(contrasena) <= 15)
);

 /* Crear la tabla Moneda */
 
CREATE TABLE Moneda (
  currency_id INT PRIMARY KEY AUTO_INCREMENT,
  currency_name VARCHAR(100) NOT NULL,
  currency_symbol VARCHAR(10)NOT NULL 
);   

/* Crear la tabla Transaccion */

CREATE TABLE Transaccion (
  transaction_id INT PRIMARY KEY AUTO_INCREMENT,
  importe DECIMAL(10, 2) NOT NULL,
  transaction_date DATE NOT NULL,
  sender_user_id INT NOT NULL,
  receiver_user_id INT NOT NULL,
  currency_id INT NOT NULL,
  FOREIGN KEY (sender_user_id) REFERENCES Usuario (user_id),
  FOREIGN KEY (receiver_user_id) REFERENCES Usuario (user_id),
  FOREIGN KEY (currency_id) REFERENCES Moneda(currency_id)
);

/* Crear la tabla Billetera */

CREATE TABLE Billetera (
  billetera_id INT PRIMARY KEY AUTO_INCREMENT,
  userBill_id INT NOT NULL,
  moneda_id INT NOT NULL, 
  FOREIGN KEY (userBill_id) REFERENCES Usuario(user_id),
  FOREIGN KEY (moneda_id) REFERENCES Moneda(currency_id)
);

/* Insertamos valores en la tabla Usuario */

INSERT INTO Usuario (user_id, Nombre, correoElectronico, contrasena, saldo) VALUES  
  (1,'Jesyca','jesy@example.com','957321',250000.00),
  (2,'Monica','moni@example.com','864367',380000.00),
  (3,'Laura','lau@example.com','249751',150000.00),
  (4,'Camila','cami@example.com','046831',950000.00),
  (5,'kathy','kat@example.com','183529',480000.00);


 /* Insertamos valores en la tabla Moneda */
 
INSERT INTO Moneda (currency_id, currency_name, currency_symbol) VALUES  
  (1,'CLP','$'),
  (2,'USD','$'),
  (3,'EUR','€');

 /* Insertamos valores en la tabla Transaccion */
 
INSERT INTO Transaccion (importe, transaction_date, sender_user_id, receiver_user_id, currency_id) VALUES  
  (50000.00, '2024-04-07', 5, 2, 1),
  (85000.00, '2024-04-06', 4, 3, 2),
  (45000.00, '2024-04-05', 3, 5, 3),
  (30000.00, '2024-04-04', 2, 1, 1), 
  (25000.00, '2024-04-03', 1, 2, 2),
  (95000.00, '2024-04-02', 5, 3, 3), 
  (40000.00, '2024-04-01', 4, 5, 1),
  (60000.00, '2024-03-31', 3, 5, 2);


/* Insertamos valores en la tabla Billetera */

INSERT INTO Billetera (billetera_id, userBill_id, moneda_id) VALUES 
  (1, 5, 1),   -- Asigna el usuario 5 con la moneda 1 a la billetera con ID 1
  (2, 2, 3),   -- Asigna el usuario 2 con la moneda 3 a la billetera con ID 2
  (3, 5, 2),   -- Asigna el usuario 5 con la moneda 2 a la billetera con ID 3
  (4, 2, 1),   -- Asigna el usuario 2 con la moneda 1 a la billetera con ID 4
  (5, 4, 2),   -- Asigna el usuario 4 con la moneda 2 a la billetera con ID 5
  (6, 4, 3),   -- Asigna el usuario 4 con la moneda 3 a la billetera con ID 6
  (7, 1, 2),   -- Asigna el usuario 1 con la moneda 2 a la billetera con ID 7
  (8, 1, 3),   -- Asigna el usuario 1 con la moneda 3 a la billetera con ID 8
  (9, 3, 2),   -- Asigna el usuario 3 con la moneda 2 a la billetera con ID 9
  (10, 5, 3),  -- Asigna el usuario 5 con la moneda 3 a la billetera con ID 10
  (11, 3, 1),  -- Asigna el usuario 3 con la moneda 1 a la billetera con ID 11
  (12, 2, 2),  -- Asigna el usuario 2 con la moneda 2 a la billetera con ID 12
  (13, 3, 3),  -- Asigna el usuario 3 con la moneda 3 a la billetera con ID 13
  (14, 4, 1),  -- Asigna el usuario 4 con la moneda 1 a la billetera con ID 14
  (15, 1, 1);  -- Asigna el usuario 1 con la moneda 1 a la billetera con ID 15

 /* CONSULTAS*/

-- a. Consulta para obtener el nombre de la moneda elegida por un usuario especifico 

  SELECT 
      U.Nombre AS usuario_nombre,
      M.currency_name AS moneda_elegida
  FROM 
      Usuario U
  INNER JOIN 
      Billetera B ON U.user_id = B.userBill_id
  INNER JOIN 
      Moneda M ON B.moneda_id = M.currency_id
  WHERE 
      U.user_id = 1; 

-- obtener el nombre de la moneda elegida por un usuario especifico incluyendo las trasnsacciones

  SELECT 
    U.Nombre AS Nombre_Usuario, 
    M.currency_name AS Nombre_Moneda, 
    T.importe, T.transaction_date
  FROM 
    Usuario U
  JOIN Billetera B ON U.user_id = B.userBill_id
  JOIN Moneda M ON B.moneda_id = M.currency_id
  LEFT JOIN Transaccion T ON (U.user_id = T.sender_user_id OR U.user_id = T.receiver_user_id)
  WHERE U.user_id = 1;

-- b. Consulta para obtener todas las transacciones realizadas (enviadas y recibidas) por un usuario especifico     

  SELECT *
    FROM Transaccion
    WHERE sender_user_id = 2 OR receiver_user_id = 2;

-- incluyendo el nombre del usuario especifico 

  SELECT T.*, 
    U.Nombre AS Nombre_Usuario
  FROM 
    Transaccion T
  JOIN Usuario U ON T.sender_user_id = U.user_id OR T.receiver_user_id = U.user_id
  WHERE U.user_id = 2;

-- incluyendo todos los nombres (EMISORES Y RECEPTORES)

  SELECT 
      T.transaction_id,
      T.importe,
      T.transaction_date,
      S.Nombre AS sender_nombre,
      R.Nombre AS receiver_nombre,
      M.currency_name
  FROM 
      Transaccion T
  INNER JOIN 
      Usuario S ON T.sender_user_id = S.user_id
  INNER JOIN 
      Usuario R ON T.receiver_user_id = R.user_id
  INNER JOIN 
      Moneda M ON T.currency_id = M.currency_id
  WHERE 
      T.sender_user_id = 2 OR T.receiver_user_id = 2;


-- c. Consulta para obtener todos los usuarios registrados

  SELECT *
    FROM Usuario;   -- consulta de todos los usuarios con sus transacciones
  
  SELECT Nombre
    FROM Usuario;   -- muestra solo los nombres de usuarios registrados en la tabla "Usuario"

-- d. Consulta para obtener todas las monedas registradas

  SELECT *
    FROM Moneda;   -- consulta la tabla moneda con sus datos

  SELECT currency_name 
    FROM Moneda;   -- consulta solo las monedas especificamente

-- e. Consulta para obtener todas las transacciones registradas

  SELECT *
    FROM Transaccion;

-- Consulta para obtener todas las transacciones registradas incluyendo los nombres de usuarios que hicieron las operaciones 

  SELECT 
      T.transaction_id,
      T.importe,
      T.transaction_date,
      U_sender.Nombre AS sender_name,
      U_receiver.Nombre AS receiver_name,
      M.currency_name
  FROM 
      Transaccion T
  INNER JOIN 
      Usuario U_sender ON T.sender_user_id = U_sender.user_id
  INNER JOIN 
      Usuario U_receiver ON T.receiver_user_id = U_receiver.user_id
  INNER JOIN 
      Moneda M ON T.currency_id = M.currency_id;

-- Consulta para obtener todas las divisas de usuarios en sus billeteras digitales registradas

  SELECT *
    FROM Billetera;

-- f. Consulta para obtener todas las transacciones realizadas (enviadas) por un usuario específico

  SELECT 
      T.transaction_id,
      T.importe,
      T.transaction_date,
      U_sender.Nombre AS sender_name,
      M.currency_name
  FROM 
      Transaccion T
  INNER JOIN 
      Usuario U_sender ON T.sender_user_id = U_sender.user_id
  INNER JOIN 
      Moneda M ON T.currency_id = M.currency_id
  WHERE 
      U_sender.user_id = 5;

-- g. Consulta para obtener todas las transacciones recibidas por un usuario específico

  SELECT 
      T.transaction_id,
      T.importe,
      T.transaction_date,
      U_receiver.Nombre AS receiver_name,
      M.currency_name
  FROM 
      Transaccion T
  INNER JOIN 
      Usuario U_receiver ON T.receiver_user_id = U_receiver.user_id
  INNER JOIN 
      Moneda M ON T.currency_id = M.currency_id
  WHERE 
      U_receiver.user_id = 4;

-- h. Sentencia DML para modificar el campo correo electrónico de un usuario específico

  UPDATE Usuario
    SET correoElectronico = 'camila2@example.com'
    WHERE user_id = 4;

-- j. Sentencia para eliminar los datos de una transacción

  DELETE FROM Transaccion
    WHERE transaction_id = 8; 

-- k. Sentencia para DDL modificar el nombre de la columna correoElectronico por email

  ALTER TABLE Usuario
    CHANGE COLUMN  email gmail  VARCHAR (100) NOT NULL;

    